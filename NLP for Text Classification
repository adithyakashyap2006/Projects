import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
temp_df = pd.read_excel("IMDB Dataset.xlsx")
df = temp_df.iloc[:10000]
print(df.head())
print(df['review'][1])
print(df['review'][45])
print(df['review'][198])
print(df['review'][1000])
print(df['sentiment'].value_counts())
print(df.isnull().sum())
print('Duplicates before dropping:')
print(df.duplicated().sum())
df.drop_duplicates(inplace = True)
print('Duplicates after dropping:')
print(df.duplicated().sum())
def remove_tags(raw_text):
    cleaned_text = re.sub(re.compile('<.*?>'), '', raw_text)
    return cleaned_text
df['review'] = df['review'].apply(remove_tags)
print(df.head())
df['review'] = df['review'].apply(lambda x:x.lower())
print(df.head(10))
sw_list = stopwords.words('english')
df['review'] = df['review'].apply(lambda x: [item for item in x.split() if item not in sw_list]).apply(lambda x: " ".join(x))
print(df.head())
X = df.iloc[:, 0:1]
y = df['sentiment']
print(X)
print(y)
encoder = LabelEncoder()
y = encoder.fit_transform(y)
print(y)
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)
print(X_train.shape)
cv = CountVectorizer()
X_train_bow = cv.fit_transform(X_train['review']).toarray()
X_test_bow = cv.fit_transform(X_test['review']).toarray()
print(X_train_bow.shape)
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)
gnb = GaussianNB()
print(gnb.fit(X_train_bow,y_train))
y_pred = gnb.predict(X_test_bow)
print('Accuracy score of Gauusian Naive Bayes:', accuracy_score(y_test, y_pred))
print('Confusion Matrix of Gaussian Naive Bayes:\n', confusion_matrix(y_test, y_pred))
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)
rf = RandomForestClassifier()
rf.fit(X_train_bow, y_train)
y_pred = rf.predict(X_test_bow)
print('Accuracy score using Random Forest Classifier:', accuracy_score(y_test, y_pred))
cv = CountVectorizer(max_features = 3000)
X_train_bow = cv.fit_transform(X_train['review']).toarray()
X_test_bow = cv.fit_transform(X_test['review']).toarray()
rf = RandomForestClassifier()
rf.fit(X_train_bow, y_train)
y_pred = rf.predict(X_test_bow)
print('Accuracy score using Random Forest Classifier by using max features:', accuracy_score(y_test, y_pred))
cv = CountVectorizer(ngram_range = (1,4), max_features = 6000)
X_train_bow = cv.fit_transform(X_train['review']).toarray()
X_test_bow = cv.fit_transform(X_test['review']).toarray()
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)
rf = RandomForestClassifier()
rf.fit(X_train_bow, y_train)
y_pred = rf.predict(X_test_bow)
#print('Accuracy score using Random Forest Classifier by using n grams range:', accuracy_score(y_test, y_pred))
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 1)
tfidf = TfidfVectorizer()
X_train_tfidf = tfidf.fit_transform(X_train['review']).toarray()
X_test_tfidf = tfidf.fit_transform(X_test['review'])
rf = RandomForestClassifier()
rf.fit(X_test_tfidf, y_train)
y_pred = tfidf.predict(X_test_tfidf)
print('Accuracy Score using TFidf Vectorizer:', accuracy_score(y_test, y_pred))
