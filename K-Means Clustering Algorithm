import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly as py
import plotly.graph_objs as go
from sklearn.cluster import KMeans
import warnings
import os
warnings.filterwarnings("ignore")
df = pd.read_csv("Mall_Customers.csv")
print(df.head())
print(df.shape)
print(df.columns)
print(df.describe())
print(df.dtypes)
print(df.isnull().sum())
plt.style.use('fivethirtyeight')
plt.figure(1, figsize = (15,6))
n = 0
for x in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:
    n = n + 1
    plt.subplot(1, 3, n)
    plt.subplots_adjust(hspace = 0.5, wspace = 0.5)
    sns.distplot(df[x], bins = 30)
    plt.title('Distplot of {}'.format(x))
plt.show()
plt.figure(1, figsize = (20,8))
sns.countplot(y = 'Gender', data = df)
plt.show()
plt.figure(1, figsize = (16,6))
n = 0
for x in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:
    for y in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:
        n = n + 1
        plt.subplot(3, 3, n)
        plt.subplots_adjust(hspace = 0.6, wspace = 0.6)
        sns.regplot(x = x, y = y, data = df)
        plt.ylabel(y.split()[0]+ ' ' +y.split()[1] if len(y.split()) > 1 else y)
plt.show()
plt.figure(1, figsize = (18,8))
for gender in ['Male', 'Female']:
    plt.scatter(x = 'Age', y = 'Annual Income (k$)', data = df[df['Gender'] == gender],
                s = 300, alpha = 0.6, label = gender)
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.title('Age vs Annual income w.r.t gender')
plt.legend()
plt.show()
plt.figure(1, figsize = (20,8))
for gender in ['Male', 'Female']:
    plt.scatter(x = 'Annual Income (k$)', y = 'Spending Score (1-100)',
                data = df[df['Gender'] == gender], s = 200, alpha = 0.5, label = gender)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Annual income vs Spending score w.r.t gender')
plt.legend()
plt.show()
plt.figure(1, figsize = (16,9))
n = 0
for cols in ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']:
    n = n + 1
    plt.subplot(1, 3, n)
    plt.subplots_adjust(hspace = 0.7, wspace = 0.7)
    sns.violinplot(x = cols, y = 'Gender', data = df, palette = 'vlag')
    sns.swarmplot(x = cols, y = 'Gender', data = df)
    plt.ylabel('Gender' if n == 1 else '')
    plt.title('Boxplots and Swarmplots' if n == 2 else '')
plt.show()
X1 = df[['Age', 'Spending Score (1-100)']].iloc[: , :].values
inertia = []
for n in range(1, 11):
    algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
    algorithm.fit(X1)
    inertia.append(algorithm.inertia_)
plt.figure(1, figsize = (18,6))
plt.plot(np.arange(1, 11), inertia = 'o')
plt.plot(np.arange(1, 11), inertia = '-', alpha = 0.5)
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()
algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
algorithm.fit(X1)
labels1 = algorithm.labels_
centroids1 = algorithm.cluster_centers_
h = 0.02
x_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1
y_min, y_max = X1[:, 0].min() - 1, X1[: ,0].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z = algorithm.predict(np.c_[xx.ravel(), yy.ravel()])
plt.figure(1, figsize = (16,6))
plt.clf()
Z = Z.reshape(xx.shape)
plt.imshow(Z, interpolation = 'nearest', extent = (xx.min(), xx.max(), yy.min(), yy.max()),
           cmap = plt.cm.Pastel2, aspect = 'auto', origin = 'lower')
plt.scatter(x = 'Age', y = 'Spending Score (1-100)', data = df, c = labels1, s = 300)
plt.scatter(x = centroids1[:, 0], y = centroids1[:, 0], s = 200, c = 'blue', alpha = 0.6)
plt.xlabel('Age')
plt.ylabel('Spending Score (1-100)')
plt.show()
X2 = df[['Annual Income (k$)', 'Spending Score (1-100)']].iloc[: , :].values
inertia = []
for n in range(1, 11):
    algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
    algorithm.fit(X1)
    inertia.append(algorithm.inertia_)
plt.figure(1, figsize = (18,6))
plt.plot(np.arange(1, 11), inertia = 'o')
plt.plot(np.arange(1, 11), inertia = '-', alpha = 0.5)
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()
algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
algorithm.fit(X2)
labels2 = algorithm.labels_
centroids1 = algorithm.cluster_centers_
h = 0.02
x_min, x_max = X2[:, 0].min() - 1, X2[:, 0].max() + 1
y_min, y_max = X2[:, 0].min() - 1, X2[: ,0].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
Z2 = algorithm.predict(np.c_[xx.ravel(), yy.ravel()])
plt.figure(1, figsize = (16,6))
plt.clf()
Z2 = Z2.reshape(xx.shape)
plt.imshow(Z2, interpolation = 'nearest', extent = (xx.min(), xx.max(), yy.min(), yy.max()),
           cmap = plt.cm.Pastel2, aspect = 'auto', origin = 'lower')
plt.scatter(x ='Annual Income (k$)' , y = 'Spending Score (1-100)', data = df, c = labels1, s = 300)
plt.scatter(x = centroids1[:, 0], y = centroids1[:, 0], s = 200, c = 'blue', alpha = 0.6)
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()
X3 = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].iloc[: , :].values
inertia = []
for n in range(1, 11):
    algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
    algorithm.fit(X1)
    inertia.append(algorithm.inertia_)
plt.figure(1, figsize = (16,6))
plt.plot(np.arange(1, 11), inertia = 'o')
plt.plot(np.arange(1, 11), inertia = '-', alpha = 0.5)
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()
algorithm = (KMeans(n_clusters = n, init = 'kmeans++', n_init = 20, max_iter = 300,
                        tol = 0.0001, random_state = 11, algorithm = 'elkan'))
algorithm.fit(X3)
labels3 = algorithm.labels_
centroids3 = algorithm.cluster_centers_
df['label3'] = labels3
trace1 = go.Scatter3d(x = df['Age'], y = df['Spending Score (1-100)'], z = ['Annual Income (k$)'],
                      mode = 'markers', marker = dict(color = df['labels3'], size = 20,
                      line = dict(color = df['labels3'], width = 13), opacity = 0.7))
data = [trace1]
layout = go.Layout(margin = dict(l = 0, r = 0, b = 0, t = 0), title = 'Clusters',
                   scene = dict(xaxis = dict(title = 'Age'),
                   yaxis = dict(title = 'Spending Score (1-100)'),
                   zaxis = dict(title = 'Annual Income (k$)')))
fig = go.Figure(data = data, layout = layout)
py.offline.iplot(fig)
print(df.head(10))
X = df.iloc[:, [3,4]].values
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'kmeans++', random_state = 0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()
kmeans_model = KMeans(n_clusters = 5, init = 'kmeans++', random_state = 0)
y_kmeans = kmeans_model.fit_predict(X)
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster4')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 100, c = 'purple',
            label = 'Centroids')
plt.title('Cluster of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()
