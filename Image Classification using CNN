import tensorflow as tf
from keras.src.backend.jax.nn import sparse_categorical_crossentropy
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
(X_train, y_train) , (X_test, y_test) = datasets.cifar10.load_data()
print(X_train.shape)
print(X_test.shape)
print(y_train[:5])
y_train = y_train.reshape(-1,)
print(y_train[:5])
classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
def plot_sample(X, y, index):
    plt.figure(figsize = (16,4))
    plt.imshow(X[index])
    plt.xlabel(classes[y[index]])
print(plot_sample(X_train, y_train, 0))
print(plot_sample(X_train, y_train, 5))
print(plot_sample(X_train, y_train, 8))
X_train = X_train / 255
X_test = X_test / 255
ann = models.Sequential([layers.Flatten(input_shape = (32,32,3)),
                         layers.Dense(3000, activation = 'relu'),
                         layers.Dense(1000, activation = 'relu'),
                         layers.Dense(10, activation = 'sigmoid')])
ann.compile(optimizer = 'SGD', loss = 'sparse_categorical_crossentropy', metrics = ['acuracy'])
print(ann.fit(X_train, y_train, epochs = 5))
y_pred = ann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]
print('Classification report:\n', classification_report(y_test, y_pred_classes))
cnn = models.Sequential([
    layers.Conv2D(filters = 32, kernel_state = (3,3), activation = 'relu', input_shape = (32,32,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(filters = 32, kernel_state = (3,3), activation = 'relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(64, activation = 'relu'),
    layers.Dense(10, activation = 'softmax')
])
cnn.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])
print(cnn.fit(X_train, y_train, epochs = 10))
print(cnn.evaluate(X_test, y_test))
y_test = y_test.reshape(-1,)
print(y_test[:5])
plot_sample(X_test, y_test, 1)
plot_sample(X_test, y_test, 4)
y_pred = cnn.predict(X_test)
print(y_pred[:5])
y_classes = [np.argmax(element) for element in y_pred]
print(y_classes[:5])
print(y_pred[:5])
plot_sample(X_test, y_test, 0) # Actual Value
print(classes[y_classes[0]]) # Predicted Value

plot_sample(X_test, y_test, 3) # Actual Value
print(classes[y_classes[3]]) # Predicted Value
print('Classification report:\n', classification_report(y_test, y_classes))
